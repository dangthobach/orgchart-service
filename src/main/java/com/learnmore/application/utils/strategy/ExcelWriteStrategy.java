package com.learnmore.application.utils.strategy;

import com.learnmore.application.utils.config.ExcelConfig;
import lombok.extern.slf4j.Slf4j;

/**
 * Chi·∫øn l∆∞·ª£c l·ª±a ch·ªçn ph∆∞∆°ng ph√°p ghi Excel d·ª±a tr√™n ng∆∞·ª°ng th·ª±c t·∫ø
 * √Åp d·ª•ng quy t·∫Øc: ‚â§2M √¥ ‚Üí XSSF, >2M √¥ ‚Üí SXSSF, >5M √¥ ‚Üí khuy·∫øn ngh·ªã CSV
 */
@Slf4j
public class ExcelWriteStrategy {
    
    /**
     * Enum ƒë·ªãnh nghƒ©a c√°c chi·∫øn l∆∞·ª£c ghi file
     */
    public enum WriteMode {
        XSSF_TRADITIONAL,    // XSSF Workbook truy·ªÅn th·ªëng (‚â§1.5M √¥)
        SXSSF_STREAMING,     // SXSSF Streaming (>1.5M √¥)
        CSV_STREAMING,       // CSV streaming (>5M √¥ ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát)
        MULTI_SHEET_SPLIT    // Chia nh·ªè th√†nh nhi·ªÅu sheet
    }
    
    /**
     * Quy·∫øt ƒë·ªãnh chi·∫øn l∆∞·ª£c ghi d·ª±a tr√™n k√≠ch th∆∞·ªõc d·ªØ li·ªáu
     * 
     * @param dataSize s·ªë l∆∞·ª£ng b·∫£n ghi
     * @param columnCount s·ªë l∆∞·ª£ng c·ªôt
     * @param config c·∫•u h√¨nh Excel
     * @return chi·∫øn l∆∞·ª£c ghi ph√π h·ª£p
     */
    public static WriteMode determineWriteStrategy(int dataSize, int columnCount, ExcelConfig config) {
        long totalCells = (long) dataSize * columnCount;
        
        log.debug("Determining write strategy for {} rows √ó {} cols = {} cells", 
                dataSize, columnCount, totalCells);
        
        // Ki·ªÉm tra b·∫Øt bu·ªôc streaming mode
        if (config.isForceStreamingMode()) {
            log.info("Force streaming mode enabled - using SXSSF");
            return WriteMode.SXSSF_STREAMING;
        }
        
        // Ki·ªÉm tra ng∆∞·ª°ng CSV (>5M √¥)
        if (config.isPreferCSVForLargeData() && totalCells > config.getCsvThreshold()) {
            log.info("Large dataset ({} cells > {} threshold) - recommending CSV streaming", 
                    totalCells, config.getCsvThreshold());
            return WriteMode.CSV_STREAMING;
        }
        
        // √Åp d·ª•ng quy t·∫Øc ng∆∞·ª°ng th·ª±c t·∫ø
        if (totalCells <= config.getMaxCellsForXSSF()) {
            // ‚â§1.5M √¥ ‚Üí XSSF ·ªïn ƒë·ªãnh v·ªõi heap 1-2GB
            log.info("Small dataset ({} cells ‚â§ {}) - using traditional XSSF", 
                    totalCells, config.getMaxCellsForXSSF());
            return WriteMode.XSSF_TRADITIONAL;
            
        } else if (totalCells <= config.getCellCountThresholdForSXSSF()) {
            // 1.5M - 2M √¥ ‚Üí SXSSF an to√†n h∆°n
            log.info("Medium dataset ({} cells) - using SXSSF streaming for safety", totalCells);
            return WriteMode.SXSSF_STREAMING;
            
        } else if (dataSize > 500_000) {
            // >500k h√†ng ‚Üí chia multi-sheet
            log.info("Very large row count ({} rows) - suggesting multi-sheet split", dataSize);
            return WriteMode.MULTI_SHEET_SPLIT;
            
        } else {
            // >2M √¥ ‚Üí SXSSF b·∫Øt bu·ªôc
            log.info("Large dataset ({} cells > {} threshold) - using SXSSF streaming", 
                    totalCells, config.getCellCountThresholdForSXSSF());
            return WriteMode.SXSSF_STREAMING;
        }
    }
    
    /**
     * T√≠nh to√°n s·ªë sheet c·∫ßn thi·∫øt cho multi-sheet split
     */
    public static int calculateOptimalSheetCount(int dataSize, ExcelConfig config) {
        int maxRowsPerSheet = 500_000; // An to√†n cho SXSSF
        return (int) Math.ceil((double) dataSize / maxRowsPerSheet);
    }
    
    /**
     * T√≠nh to√°n k√≠ch th∆∞·ªõc c·ª≠a s·ªï h√†ng t·ªëi ∆∞u cho SXSSF
     * D·ª±a tr√™n quy m√¥ d·ªØ li·ªáu v√† heap available
     */
    public static int calculateOptimalWindowSize(int dataSize, int columnCount, ExcelConfig config) {
        long totalCells = (long) dataSize * columnCount;
        
        // ƒêi·ªÅu ch·ªânh window size d·ª±a tr√™n k√≠ch th∆∞·ªõc d·ªØ li·ªáu
        if (totalCells > 10_000_000L) {
            return 100; // C·ª≠a s·ªï nh·ªè cho d·ªØ li·ªáu r·∫•t l·ªõn
        } else if (totalCells > 5_000_000L) {
            return 250; // C·ª≠a s·ªï trung b√¨nh
        } else {
            return config.getSxssfRowAccessWindowSize(); // S·ª≠ d·ª•ng config m·∫∑c ƒë·ªãnh (500)
        }
    }
    
    /**
     * Ki·ªÉm tra format file c√≥ ph√π h·ª£p v·ªõi k√≠ch th∆∞·ªõc d·ªØ li·ªáu kh√¥ng
     */
    public static void validateFileFormat(String fileName, int dataSize, int columnCount, ExcelConfig config) {
        if (fileName.toLowerCase().endsWith(".xls")) {
            if (!config.isAllowXLSFormat()) {
                throw new IllegalArgumentException("XLS format is disabled in configuration");
            }
            
            if (dataSize > config.getMaxRowsForXLS()) {
                throw new IllegalArgumentException(
                    String.format("Data size (%d rows) exceeds XLS limit (%d rows). Use .xlsx format instead.", 
                            dataSize, config.getMaxRowsForXLS()));
            }
            
            if (columnCount > config.getMaxColsForXLS()) {
                throw new IllegalArgumentException(
                    String.format("Column count (%d) exceeds XLS limit (%d cols). Use .xlsx format instead.", 
                            columnCount, config.getMaxColsForXLS()));
            }
        }
    }
    
    /**
     * ƒê∆∞a ra khuy·∫øn ngh·ªã t·ªëi ∆∞u h√≥a d·ª±a tr√™n k√≠ch th∆∞·ªõc d·ªØ li·ªáu
     */
    public static String getOptimizationRecommendation(int dataSize, int columnCount, ExcelConfig config) {
        long totalCells = (long) dataSize * columnCount;
        StringBuilder recommendation = new StringBuilder();
        
        WriteMode strategy = determineWriteStrategy(dataSize, columnCount, config);
        
        recommendation.append("Strategy: ").append(strategy).append("\n");
        
        switch (strategy) {
            case XSSF_TRADITIONAL:
                recommendation.append("- K√≠ch th∆∞·ªõc v·ª´a ph·∫£i, XSSF ·ªïn ƒë·ªãnh\n");
                recommendation.append("- Khuy·∫øn ngh·ªã: -Xmx 1-2GB\n");
                break;
                
            case SXSSF_STREAMING:
                int windowSize = calculateOptimalWindowSize(dataSize, columnCount, config);
                recommendation.append("- S·ª≠ d·ª•ng SXSSF streaming v·ªõi windowSize=").append(windowSize).append("\n");
                recommendation.append("- Khuy·∫øn ngh·ªã: -Xmx 1.5-2GB+, ƒë·∫£m b·∫£o dung l∆∞·ª£ng ƒëƒ©a\n");
                break;
                
            case CSV_STREAMING:
                recommendation.append("- D·ªØ li·ªáu r·∫•t l·ªõn, khuy·∫øn ngh·ªã CSV streaming\n");
                recommendation.append("- CSV nh·∫π h∆°n, x·ª≠ l√Ω nhanh h∆°n Excel\n");
                break;
                
            case MULTI_SHEET_SPLIT:
                int sheetCount = calculateOptimalSheetCount(dataSize, config);
                recommendation.append("- Chia th√†nh ").append(sheetCount).append(" sheets\n");
                recommendation.append("- M·ªói sheet ‚â§500k h√†ng ƒë·ªÉ ƒë·∫£m b·∫£o performance\n");
                break;
        }
        
        // C·∫£nh b√°o v·ªÅ performance
        if (totalCells > 10_000_000L) {
            recommendation.append("‚ö†Ô∏è C·∫£nh b√°o: D·ªØ li·ªáu r·∫•t l·ªõn (>10M √¥), c√≥ th·ªÉ x·ª≠ l√Ω ch·∫≠m\n");
        }
        
        if (dataSize > 1_000_000) {
            recommendation.append("üí° G·ª£i √Ω: C√¢n nh·∫Øc chia nh·ªè file ƒë·∫ßu v√†o ho·∫∑c x·ª≠ l√Ω batch\n");
        }
        
        return recommendation.toString();
    }
}